===============================================================================
                           USER DOCUMENTATION
===============================================================================

============
 Coff Usage
============

Usage: coff [-d?V] [-f FLAG] [-l LANG] [-q FILE/PATH] [-s FILE/PATH ]
            [-t FILE/PATH ] [--doc] [--flag=FLAG] [--lang=LANG]
            [--quest=FILE/PATH] [--show=FILE/PATH ] [--test=FILE/PATH ]
            [--help] [--usage] [--version]

===============================================================================

===========
 Coff Help
===========

Usage: coff [OPTION...]

coff - Offline Judge

  -d, --doc                  Documentation

  -f, --flag=FLAG            C/C++ program may need linked flags like,
                             "-lpthread", "-lncurses", "-lm", etc. Or one may
                             need to pass some arguments to an interpreter
                             like, "-c", "-q",etc.They should be written inside
                             double quotes.

  -l, --lang=LANG            Specify the language of your program. LANG=
                             [C, C++, C++11, C++17, JAVA, Python2, Python3,
                             Javascript]

  -q, --quest=FILE/PATH      Used with --test for Evaluation

  -s, --show=FILE/PATH       Prints Question

  -t, --test=FILE/PATH       Program/ Solution File

  -?, --help                 Give this help list
      --usage                Give a short usage message
  -V, --version              Print program version

Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.

===============================================================================

=================
 Start With Coff
=================

As soon as a person builds Coff using `make`, an example question is saved to
`~/coff/quest` directory, with name "example1.quest" .

You can see the question by running:
>./coff -s example1.quest

Write a program for it and save it `~/coff/ans`. Lets say you made "1.c". Type:
>./coff -q example1.quest -l c -t 1.c

All program files must be saved inside `~/coff/ans` or as in the path specified
in configuration file, else provide full path to your profram.


One can also find sample C/C++, Python and Javascript programs which were used
in testing of Coff. They are in `test_programs/` directory.

===============================================================================

====================
 Configuration File
====================

The configuration file defines the behavious of Coff. When Coff is build
using "make" command, it creates `~/.coff_config` file and writes default
values in it.

If you pass just filename to options, ex: "coff -s 1.quest -t sol.c"
Then, by default coff reads:
   - Questions from path: ~/coff/quest
   - Answers from path:   ~/coff/ans

The default path can be changed by editing configuration file: `~/.coff_config`

The ~/.coff_config should be written as:
        <PROPERTYNAME>
        <PATH>
  Where <PROPERTYNAME> name can be either of "PATH TO ANSWER" or "PATH TO
  QUESTION" and <PATH> is path to directory.
      Example: 
        1 |PATH TO QUESTION
        2 |~/coff/quest

===============================================================================

=============================
 Languages supported by Coff
=============================

Given that supporting compiler/interpreter is installed on your system,
Coff supports following languages:
     -----------------------------------------
     |     Lang      |  Compiler/Interpreter |
     ----------------------------------------
     | C             |  gcc                  |
     | C++           |  g++                  |
     | C++11         |  g++                  |
     | C++17         |  g++                  |
     | Python2       |  python2              |
     | Python3       |  python3              |
     | Javascript/Js |  nodejs               |
     -----------------------------------------

===============================================================================

==========
 Examples
==========

For following examples we will use:
  - Question file: example1.quest
  - Testfile:      add.c or add.cpp or add.js or add.py, depends on example.

## To show a Question.
> ./coff -s example1.quest

## To run a test.
> ./coff -t add.c -q example1.quest -l c

## To run a test and show question.
> ./coff -t add.c -s example1.quest -l c

## To run a C++17 program.
> ./coff -t add.cpp -s example1.quest -l c++17

## To run a test and pass necessary flag/arguments.
> ./coff -t add.cpp -s example1.quest -l c++11 -f "-lm -lpthread"
or
> ./coff -t add.py -s example1.quest -lpython3 -f "-c"

===============================================================================

================
 Write Question
================

Coff works very differently from online Code Judges.

Normally, online judges give 2 types of inputs to your solution program. 1st
input defines number of test cases and 2 type of inputs are the actual inputs
to test your solution.

Coff doesn't require 1st input. While making a question file, it simple asks
the question-maker to input the number of examples and test-cases he/she would
like to feed. And does it accordingly.

Your solution need not take input for number of test-cases.

While feeding questions:

  1) - Feed Question name (Max 100 Chars)
  2) - Feed Question statement/description (Max 1000 Chars). This is done via
       commandline, hence it should not contain new line. If you want new line.
       Because as soon as you press enter, it will take input.
  3) - The tricky place is when is asks for "Example input", "Example output",
       "Test case input" and "Test case output". Since many questions may
       contain string patterns in input or output, no strict string parsing is
       done in Coff.

       In normal case:
       a) - There should be no preceeding blank characters nor trailing.
       b) - Each distinct input should be separated by single white space.
       c) - For example, for adding,
            the input is "2 5" and output is "7" (without double quotes).
            It should not be "  2   5 " or "   7", unless the motive of the
            question is a string pattern.

            As, for example in addition program, python reads a = int(input()).
            The trailing, preceeding extra white space will be read and cause
            error.
       d) - For the same reason, there should be no non-required newline
            characters.

  4) - Once done, the question file will be created with name
       "newQuestion.quest", at the location specied under the heading
       "PATH TO QUESTION" in your configuration file.

===============================================================================
